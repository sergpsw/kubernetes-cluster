---

- hosts: all
  become: yes
  tasks:
  - name: Brake if OS non Debian or RedHat family
    fail: msg="Not works for this OS family!"
    when: ansible_os_family != "Debian" and ansible_os_family != "RedHat"

  - name: Check Version OS
    block: # For Debian
    - name: Install packages that allow apt to be used over HTTPS
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg-agent
        - software-properties-common

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu bionic stable
        state: present

    - name: Install docker and its dependecies
      apt: 
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        - docker-ce 
        - docker-ce-cli 
        - containerd.io
      notify:
        - docker status
    when: ansible_os_family == "Debian"

  - name: Check Version OS
    block: # For Redhat
    - name: Install yum utils
      yum:
        name: yum-utils
        state: latest

    - name: Install device-mapper-persistent-data
      yum:
        name: device-mapper-persistent-data
        state: latest

    - name: Install lvm2
      yum:
        name: lvm2
        state: latest

    - name: Add Docker repo
      get_url:
        url: https://download.docker.com/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/docker-ce.repo

    - name: Install Docker
      package:
        name: docker-ce
        state: latest

    - name: Start Docker service
      service:
        name: docker
        state: started
        enabled: yes
    when: ansible_os_family == "RedHat"

  - name: Add vagrant user to docker group
    user:
      name: vagrant
      group: docker

  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
    - swap
    - none

  - name: Disable swap
    shell: swapoff -a
    when: ansible_swaptotal_mb > 0

  - name: Check Version OS
    block: # For Debian
    - name: Add an apt signing key for Kubernetes
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Adding apt repository for Kubernetes
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: kubernetes.list

    - name: Install Kubernetes binaries
      apt: 
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        - kubelet
        - kubeadm 
        - kubectl
    when: ansible_os_family == "Debian"

  - name: Check Version OS
    block: # For Redhat
    - name: Disable SELinux
      command: setenforce 0

    - name: Disable SELinux on reboot
      selinux:
        state: disabled

    - name: Ensure net.bridge.bridge-nf-call-ip6tables is set to 1
      sysctl:
        name: net.bridge.bridge-nf-call-ip6tables
        value: 1
        state: present

    - name: Ensure net.bridge.bridge-nf-call-iptables is set to 1
      sysctl:
        name: net.bridge.bridge-nf-call-iptables
        value: 1
        state: present

    - name: Add Kubernetes yum repository
      yum_repository:
        name: Kubernetes
        description: Kubernetes YUM repository
        baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
        gpgkey: https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
        gpgcheck: yes

    - name: Install kubelet
      yum:
          name: kubelet
          state: latest
          update_cache: true

    - name: Install kubeadm
      yum:
          name: kubeadm
          state: latest

    - name: Install kubectl
      yum:
        name: kubectl
        state: latest
        allow_downgrade: yes
    when: ansible_os_family == "RedHat"

  - name: Configure node ip
    lineinfile:
      path: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
      line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}
    when: ansible_os_family == "Debian"

  handlers:
  - name: docker status
    service: name=docker state=started


- hosts: masterk8s
  become: yes
  vars:
    src: /var/www/vagrant/manifests/
    dest: /home/vagrant/
  tasks:
  - name: Restart kubelet
    service:
      name: kubelet
      daemon_reload: yes
      state: restarted

  - name: Initialize the cluster
    shell: kubeadm init --apiserver-advertise-address={{ node_ip }} --apiserver-cert-extra-sans={{ node_ip }}  --node-name masterk8s --pod-network-cidr=192.168.0.0/16

  - name: Create .kube directory
    become: yes
    become_user: vagrant
    file:
      path: $HOME/.kube
      state: directory
      mode: 0755

  - name: Copy admin.conf to user's kube config
    copy:
      src: /etc/kubernetes/admin.conf
      dest: /home/vagrant/.kube/config
      remote_src: yes
      owner: vagrant

  - name: Install HAProxy
    package:
      name: haproxy
      state: latest

  - name: Copy configure HAProxy
    copy: src=/var/www/vagrant/haproxy/haproxy.cfg.j2 dest=/etc/haproxy/haproxy.cfg remote_src=yes owner=vagrant
    notify: restart haproxy

  - name: Generate join command
    shell: kubeadm token create --print-join-command
    register: join_command

  - name: Copy join command to local file
    local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"

  - name: Copy manifest-files
    copy: src={{ src }}{{ item }} dest={{ dest }} remote_src=yes owner=vagrant
    loop:
    - "kube-flannel.yml"
    - "nginx-deployment.yml"
    - "nginx-ingress.yml"

  - name: Install Pods
    become: yes
    become_user: vagrant
    shell: kubectl apply -f kube-flannel.yml -f nginx-deployment.yml >> pods_setup.txt
    args:
      chdir: $HOME
      creates: pods_setup.txt

  handlers:
  - name: restart haproxy
    service: name=haproxy state=restarted

- hosts: workerk8s*
  become: yes
  tasks:
  - name: Restart kubelet
    service:
      name: kubelet
      daemon_reload: yes
      state: restarted

  - name: Copy the join command to server location
    copy: src=join-command dest=/tmp/join-command.sh mode=0777

  - name: Join the node to cluster (Debian)
    shell: /tmp/join-command.sh
    when: ansible_os_family == "Debian"

  - name: Join the node to cluster (RedHat)
    shell: |
      kubeadm reset -f
      echo -n " --ignore-preflight-errors=all"  >> /tmp/join-command.sh
      sh /tmp/join-command.sh
    when: ansible_os_family == "RedHat"